~~
~~ Copyright (c) 2004-2013, Willem Cazander
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without modification, are permitted provided
~~ that the following conditions are met:
~~
~~ * Redistributions of source code must retain the above copyright notice, this list of conditions and the
~~   following disclaimer.
~~ * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
~~   the following disclaimer in the documentation and/or other materials provided with the distribution.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
~~ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
~~ MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
~~ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
~~ OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
~~ TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
~~ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Start Language

  To integrate x4o as parser for your language there needs to be a few minimal steps
  be te taken, to have a working language.
  
  * Create driver class.
  
  * Create driver config file.
  
  * Create language modules files.
  
  * Create element language definition files. 


* Create your parser

+--
public class TestFooBarDriver extends X4ODriver<TestFooBar> {

	static final public String LANGUAGE_NAME = "test-foo-bar";
	static final public String[] LANGUAGE_VERSIONS = new String[]{X4ODriver.DEFAULT_LANGUAGE_VERSION};
	
	@Override
	public String getLanguageName() {
		return LANGUAGE_NAME;
	}

	@Override
	public String[] getLanguageVersions() {
		return LANGUAGE_VERSIONS;
	}
	
	static public TestFooBarDriver getInstance() {
		return (TestFooBarDriver)X4ODriverManager.getX4ODriver(LANGUAGE_NAME);
	}
}
+--

* Create driver config

  In the file "META-INF/x4o-drivers.xml"

+--
<drivers version="1.0"
	xmlns="http://language.x4o.org/xml/ns/drivers"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://language.x4o.org/xml/ns/drivers http://language.x4o.org/xml/ns/drivers-1.0.xsd"
	>
	<driver language="test-foo-bar" className="org.x4o.xml.test.TestFooBarDriver"/>
</drivers>

+--

* Create modules

  Create the file "META-INF/test-foo-bar/test-foo-bar-modules.xml" with:
  
+--
<?xml version="1.0" encoding="UTF-8"?>
<modules version="1.0"
	xmlns="http://language.x4o.org/xml/ns/modules"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://language.x4o.org/xml/ns/modules http://language.x4o.org/xml/ns/modules-1.0.xsd"
	>
	<language version="1.0">
		<eld-resource>foobar-lang.eld</eld-resource>
	</language>
</modules>
+--

* Create ELD file

  Create the file "META-INF/test-foo-bar/foobar-lang.eld" with:
  
+--
<?xml version="1.0" encoding="UTF-8"?>
<root:module
	xmlns:root="http://eld.x4o.org/xml/ns/eld-root"
	xmlns:eld="http://eld.x4o.org/xml/ns/eld-lang"
	xmlns:conv="http://eld.x4o.org/xml/ns/eld-conv"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://eld.x4o.org/xml/ns/eld-root http://eld.x4o.org/xml/ns/eld-root-1.0.xsd"
	id="foobar"
	>
	
	<eld:classBindingHandler id="test1" bean.class="org.foo.bar.x4o.MyFooBarBindingHandler"/>
	<eld:classBindingHandler id="test2" parentClass="org.foo.bar.TestObjectParent" childClass="org.foo.bar.TestObjectChild" method="addTestObjectChild"/>

	<eld:elementInterface id="JComponent" interfaceClass="javax.swing.JComponent">
		<eld:classBindingHandler id="JComponent-JComponent" parentClass="javax.swing.JComponent" childClass="javax.swing.JComponent" method="add"/>
	</eld:elementInterface>
	
	<eld:namespace
		uri="http://foobar.test.x4o.org/xml/ns/foobar-root"
		schemaUri="http://test.x4o.org/xml/ns/foobar-root-1.0.xsd"
		schemaResource="foobar-root-1.0.xsd"
		schemaPrefix="root"
		name="FooBar Root Namespace"
		languageRoot="true"
		id="root"
		>
		<eld:element tag="foobar" objectClass="org.foo.bar.TestFooBar">
			<eld:description>The root element.</eld:description>
		</eld:element>
	</eld:namespace>
	
	<eld:namespace
		uri="http://foobar.test.x4o.org/xml/ns/foobar-lang"
		schemaUri="http://foobar.test.x4o.org/xml/ns/foobar-lang-1.0.xsd"
		schemaResource="foobar-lang-1.0.xsd"
		schemaPrefix="lang"
		name="FooBar Language Namespace"
		id="lang"
		>		
		<eld:element tag="testBean" objectClass="org.foo.bar.TestBean"/>
		
		<!--  etc  -->
	</eld:namespace>
</root:module>
+--

  Now you can startup the parser to see it work.
  
* Create xml to parse
  
+--
<?xml version="1.0" encoding="UTF-8"?>
<root:foobar
	xmlns="http://foobar.test.x4o.org/xml/ns/foobar-lang"
	xmlns:root="http://foobar.test.x4o.org/xml/ns/foobar-root"
	>
	<testBean value="testing foo bar language."/>
</root:foobar>
+--
  
* Parse the xml
  
+--
TestFooBarDriver driver = TestFooBarDriver.getInstance();

X4OReader<TestFooBar> reader = driver.createReader();
TestFooBar result = reader.readResource("junit/test-foo-bar/test-bean.xml");

result.addTestBean(new TestBean("test-bean"));
result.addTestBean(new TestBean("test-bean-extra"));

X4OWriter<TestFooBar> writer = driver.createReader();
writer.writeFile(result, new File("/tmp/test-bean.xml");
+--

  And writer gives output like;

+--
<?xml version="1.0" encoding="UTF-8"?>
<root:foobar
	xmlns:lang="http://foobar.test.x4o.org/xml/ns/foobar-lang"
	xmlns:root="http://foobar.test.x4o.org/xml/ns/foobar-root"
	>
	<lang:testBean value="testing foo bar language."/>
	<lang:testBean value="test-bean"/>
	<lang:testBean value="test-bean-extra"/>
</root:foobar>
+--
